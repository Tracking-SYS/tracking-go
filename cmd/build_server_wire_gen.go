// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire gen -tags "dynamic"
//+build !wireinject

package main

import (
	"context"
	"github.com/Tracking-SYS/tracking-go/config"
	"github.com/Tracking-SYS/tracking-go/handler"
	"github.com/Tracking-SYS/tracking-go/infra"
	"github.com/Tracking-SYS/tracking-go/repo/cache"
	"github.com/Tracking-SYS/tracking-go/repo/mysql"
	"github.com/Tracking-SYS/tracking-go/server"
	"github.com/Tracking-SYS/tracking-go/services"
)

// Injectors from buildServer.go:

func buildServer(ctx context.Context) (*server.Manager, error) {
	configuration := infra.InitConfiguration()
	connPool, err := infra.GetConnectionPool(configuration)
	if err != nil {
		return nil, err
	}
	productMySQLRepo := mysql.NewProductMySQLRepo(connPool)
	redisCache := cache.NewRedisCacheRepo()
	productService := services.ProductProvider(productMySQLRepo, redisCache)
	productPBHandler := handler.NewProductPBHandler(productService)
	taskMySQLRepo := mysql.NewTaskMySQLRepo(connPool)
	taskService := services.TaskProvider(taskMySQLRepo, redisCache)
	taskPBHandler := handler.NewTaskPBHandler(taskService)
	httpServer, err := server.HTTPProvider(ctx, productPBHandler, taskPBHandler)
	if err != nil {
		return nil, err
	}
	metricPort := config.ProvideMetricPort()
	metricServer, err := server.NewMetricServer(metricPort)
	if err != nil {
		return nil, err
	}
	kafkaConsumer, err := server.NewKafkaConsumer(productService, taskService, productMySQLRepo)
	if err != nil {
		return nil, err
	}
	manager := server.NewServerManager(httpServer, metricServer, kafkaConsumer)
	return manager, nil
}
